// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(uuid())
  user_code          String             @unique
  fullname           String
  username           String             @unique
  email              String             @unique
  phone              String             @unique
  job_status         String
  field              String?
  password           String
  avatar             String?
  role               Role               @default(CUSTOMER)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  transactions       Transaction[]
}

enum Role {
  CUSTOMER
  ADMIN
}

model DigitalProduct {
  id           String        @id @default(uuid())
  title        String
  description  String        @db.Text
  price        Float
  file_path    String
  thumbnail    String?
  category     String
  tag          String?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  transactions Transaction[]
}

model Transaction {
  id            String            @id @default(uuid())
  user_id       String
  user          User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  amount        Float
  payment_proof String?           @db.Text
  status        TransactionStatus @default(UNPAID)
  product_id    String?
  product       DigitalProduct?   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  purchased_product PurchasedProduct?
}

enum TransactionStatus {
  UNPAID
  PENDING
  APPROVED
  REJECTED
}

model PurchasedProduct {
  id         String @id @default(uuid())
  product_id String
  transaction_id String      @unique
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  download_link  String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}
